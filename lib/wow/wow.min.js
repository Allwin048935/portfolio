(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['module', 'exports'], factory);
  } else if (typeof exports !== 'undefined') {
    factory(module, exports);
  } else {
    var mod = { exports: {} };
    factory(mod, mod.exports);
    global.WOW = mod.exports;
  }
})(this, function (module, exports) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _indexOf(array, item) {
    return array.indexOf(item) >= 0;
  }

  function _extend(target, source) {
    for (var key in source) {
      if (target[key] == null) {
        target[key] = source[key];
      }
    }
    return target;
  }

  function _isMobile(userAgent) {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
  }

  function _createEvent(eventName, bubbles, cancelable, detail) {
    var event;
    if (document.createEvent) {
      event = document.createEvent('CustomEvent');
      event.initCustomEvent(eventName, bubbles || false, cancelable || false, detail);
    } else if (document.createEventObject) {
      event = document.createEventObject();
      event.eventType = eventName;
    } else {
      event.eventName = eventName;
    }
    return event;
  }

  function _dispatchEvent(element, event) {
    if (element.dispatchEvent) {
      element.dispatchEvent(event);
    } else if (event in element) {
      element[event]();
    } else if ('on' + event in element) {
      element['on' + event]();
    }
  }

  function _addEventListener(element, event, handler) {
    if (element.addEventListener) {
      element.addEventListener(event, handler, false);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, handler);
    } else {
      element[event] = handler;
    }
  }

  function _removeEventListener(element, event, handler) {
    if (element.removeEventListener) {
      element.removeEventListener(event, handler, false);
    } else if (element.detachEvent) {
      element.detachEvent('on' + event, handler);
    } else {
      delete element[event];
    }
  }

  function _getWindowHeight() {
    return 'innerHeight' in window ? window.innerHeight : document.documentElement.clientHeight;
  }

  // WeakMap polyfill
  var WeakMap = window.WeakMap || window.MozWeakMap || (function () {
    function WeakMap() {
      _classCallCheck(this, WeakMap);
      this.keys = [];
      this.values = [];
    }

    WeakMap.prototype.get = function (key) {
      for (var i = 0; i < this.keys.length; i++) {
        if (this.keys[i] === key) {
          return this.values[i];
        }
      }
    };

    WeakMap.prototype.set = function (key, value) {
      for (var i = 0; i < this.keys.length; i++) {
        if (this.keys[i] === key) {
          this.values[i] = value;
          return this;
        }
      }
      this.keys.push(key);
      this.values.push(value);
      return this;
    };

    return WeakMap;
  })();

  // MutationObserver polyfill
  var MutationObserver = window.MutationObserver || window.WebkitMutationObserver || window.MozMutationObserver || (function () {
    function MutationObserver() {
      _classCallCheck(this, MutationObserver);
      if (typeof console !== 'undefined' && console !== null) {
        console.warn('MutationObserver is not supported by your browser.');
        console.warn('WOW.js cannot detect dom mutations, please call .sync() after loading new content.');
      }
    }

    MutationObserver.prototype.observe = function () {};

    MutationObserver.notSupported = true;
    return MutationObserver;
  })();

  // Main WOW class
  var WOW = (function () {
    function WOW() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      _classCallCheck(this, WOW);

      this.defaults = {
        boxClass: 'wow',
        animateClass: 'animated',
        offset: 0,
        mobile: true,
        live: true,
        callback: null,
        scrollContainer: null,
        resetAnimation: true
      };

      this.animate = 'requestAnimationFrame' in window
        ? function (callback) { return window.requestAnimationFrame(callback); }
        : function (callback) { return callback(); };

      this.vendors = ['moz', 'webkit'];
      this.start = this.start.bind(this);
      this.resetAnimation = this.resetAnimation.bind(this);
      this.scrollHandler = this.scrollHandler.bind(this);
      this.scrollCallback = this.scrollCallback.bind(this);
      this.scrolled = true;
      this.config = _extend(options, this.defaults);
      if (options.scrollContainer != null) {
        this.config.scrollContainer = document.querySelector(options.scrollContainer);
      }
      this.animationNameCache = new WeakMap();
      this.wowEvent = _createEvent(this.config.boxClass);
    }

    WOW.prototype.init = function () {
      this.element = window.document.documentElement;
      if (_indexOf(document.readyState, ['interactive', 'complete'])) {
        this.start();
      } else {
        _addEventListener(document, 'DOMContentLoaded', this.start);
      }
      this.finished = [];
    };

    // ... (Additional methods would continue here)
    return WOW;
  })();

  exports.default = WOW;
  module.exports = exports['default'];
});